import json
import time

from matcher import Tagger
from matcher.config import *
from dbinterface import DBInterface
from dbinterface.commands import *
from dbinterface.config import *

if __name__ == '__main__':

    # Initialize DBInterface with appropriate databases
    db = DBInterface(dbname=DBNAME, user=USER, password=PASSWORD, host=HOST, port=PORT)

    # Get tags id and name from database
    db.execute(GET_TAGS_CMD)
    tags = db.fetchall()

    # Initialize Tagger with parameters
    tagger = Tagger(tags=tags, to_exclude=TO_EXCLUDE, ngrams=NGRAMS, window_width=WINDOW_WIDTH)

    while True:

        db = DBInterface(dbname=DBNAME, user=USER, password=PASSWORD, host=HOST, port=PORT)

        # Execute command to get articles
        db.execute(GET_ARTICLES_CMD)
        articles = db.fetchall()

        if not articles:
            print('Going to sleep\n')
            time.sleep(60 * 60 / 2)

        for article in articles:
            # Get all available data about article
            id, source_id, url, status, html, pub_date, content = article

            # Transform json-string to dictionary
            content = json.loads(content)

            print('_' * 45)
            print('Id {} processing started...\n'.format(id))

            # Extract info about article
            print('Parsing has started...')
            tagger.parse(html=html)
            print('Parsing has done.')

            print('Summarization has started...')
            content["summary"] = tagger.summarize()
            print('Summarization has done.')

            print('Estimation has started...')
            content["timeToRead"], content["readability"] = tagger.estimate()
            print('Estimation has done.')

            print('Tagging has started...')
            tags_from_text = [tag for tag, p in tagger(html=html, matches=content["tags"])]
            print('Tagging has done.')

            # Handle apostrophes
            content = json.dumps(content).replace("'", "`")

            # Update database
            UPDATE_ARTICLE_CMD = "UPDATE public.\"Articles\"" \
                                 "SET articles_status = 'Updated', articles_content = '{}' " \
                                 "WHERE articles_id = {}".format(content, id)
            db.execute(UPDATE_ARTICLE_CMD)

            print('\nId {} updated.'.format(id))
            print('_' * 45 + '\n')

        db.commit()
        db.disconnect()
