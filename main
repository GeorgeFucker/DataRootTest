from matcher import Extractor, DBInterface, Categorizer
from textacy.keyterms import sgrank, key_terms_from_semantic_network, singlerank, textrank

tag = None

GET_ALL_TAGS_NAMES_CMD = 'SELECT * FROM tags;'
GET_ALL_LINKS_CMD = 'SELECT * FROM links;'

macro = ['artificial intelligence','deep learning','computer vision','object recognition',
         'natural language processing','machine learning']

micro = ['perceptron','genetic algorithm','tensorflow','feature extraction','natural language understanding',
         'natural language generation','chatterbot','recurrent neural network rnn','convolutional neural network',
         'long short term memory lstm', 'data mining','recommendation system','pytorch','caffe','scikit learn',
         'machine learn algorithm','regularization algorithm','classifier','dimensionality reduction',
         'ensemble learning','reinforcement learning','supervised learning','decision tree algorithm',
         'bayesian','unsupervised learning','semi supervised learning']

if __name__ == '__main__':

    url = 'https://medium.com/s/story/spotifys-discover-weekly-how-machine-learning-finds-your-new-music-19a41ab76efe'

    db = DBInterface(dbname='postgres', user='postgres')
    tags = db.fetchall(GET_ALL_TAGS_NAMES_CMD)
    links = db.fetchall(GET_ALL_LINKS_CMD)

    extractor = Extractor(url=url)

    extractor.preprocess(lowercase=True, no_punct=True, no_urls=True, no_stop_words=True)

    keyphrases = extractor.extract_keyphrases(algorithm=sgrank, ngrams=(1, 2, 3), window_width=1200)

    categorizer = Categorizer(tags=tags, keyphrases=keyphrases, links=links)

    categorizer.match()

    categorizer.categorize(macro_ctg=macro, micro_ctg=micro)

    print(categorizer.categories)
    print(categorizer.macro_ctg)
    print(categorizer.micro_ctg)


