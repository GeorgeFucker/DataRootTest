import pprint
import json

from matcher import Tagger
from matcher.config import *
from dbinterface import DBInterface
from dbinterface.commands import *
from dbinterface.config import *

if __name__ == '__main__':

    # Initialize DBInterface with appropriate databases
    db = DBInterface(dbname=DBNAME, user=USER, password=PASSWORD, host=HOST, port=PORT)

    # Get tags id and name from database
    db.execute(GET_TAGS_CMD)
    tags = db.fetchall()

    # Initialize Tagger with parameters
    tagger = Tagger(tags=tags, to_exclude=TO_EXCLUDE, ngrams=NGRAMS, window_width=WINDOW_WIDTH)

    # Execute command to get articles
    db.execute(GET_ARTICLES_CMD)
    articles = db.fetchall()

    for article in articles:
        # Get all available data about article
        id, source_id, url, status, html, pub_date, content = article

        # Transform json-string to dictionary
        content = json.loads(content)

        # Extract info about article
        tagger.parse(html=html)
        content["summary"] = tagger.summarize()
        content["timeToRead"], _ = tagger.estimate()
        tags_from_text = [tag for tag, p in tagger(html=html)]
        if content["tags"]:
            content["tags"].extend(tags_from_text)
        else:
            content["tags"] = tags_from_text

        # Handle apostrophes

        content = json.dumps(content).replace("'", "`")

        # Update database
        UPDATE_ARTICLE_CMD = "UPDATE public.\"Articles\"" \
                             "SET articles_status = 'Updated', articles_content = '{}' " \
                             "WHERE articles_id = {}".format(content, id)
        db.execute(UPDATE_ARTICLE_CMD)

        print('Id {} added.'.format(id))

    db.commit()
    db.disconnect()